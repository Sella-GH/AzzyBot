name: Normalize PR Formatting

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write
  pull-requests: write

jobs:
  normalize:
    runs-on: ubuntu-24.04
    steps:
      - name: Check out PR head branch (same-repo)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Configure Git author and line ending behavior
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Prevent Git from altering line endings on checkout/add/commit
          git config core.autocrlf false

      - name: Normalize files (CRLF + indentation)
        id: normalize
        shell: bash
        run: |
          set -euo pipefail

          is_text_file() {
            local f="$1"
            if ! command -v file >/dev/null 2>&1; then
              return 0
            fi
            local mime
            mime="$(file -i "$f" 2>/dev/null || true)"
            if printf '%s' "$mime" | grep -qi 'charset=binary'; then
              return 1
            fi
            return 0
          }

          process_file() {
            local f="$1"
            local tabstop=2
            case "$f" in
              *.cs|*.CS|*.cS|*.Cs) tabstop=4 ;;
              *) tabstop=2 ;;
            esac

            if [ ! -w "$f" ]; then
              echo "Skipping (not writable): $f" >&2
              return 0
            fi

            local tmp
            tmp="$(mktemp "${TMPDIR:-/tmp}/normXXXXXX")"

            if command -v expand >/dev/null 2>&1; then
              sed 's/\r$//' "$f" | expand -t "$tabstop" | awk '{ printf "%s\r\n", $0 }' > "$tmp"
            else
              sed 's/\r$//' "$f" \
                | sed -E ':a; s/^([[:space:]]*)\t/\1'$(printf "%${tabstop}s" " ")'/; ta' \
                | awk '{ printf "%s\r\n", $0 }' > "$tmp"
            fi

            if ! cmp -s "$tmp" "$f"; then
              cat "$tmp" > "$f"
              echo "Updated: $f (tabs -> ${tabstop} spaces, CRLF endings)"
            fi
            rm -f "$tmp"
          }

          export -f is_text_file
          export -f process_file

          # Process all regular files except those under .git
          find "." -path "./.git" -prune -o -type f -print0 \
          | while IFS= read -r -d '' f; do
              case "$f" in
                */.git/*) continue ;;
              esac
              if is_text_file "$f"; then
                process_file "$f"
              else
                echo "Skipping (binary): $f" >&2
              fi
            done

          # Set an output to indicate if anything changed
          if ! git diff --quiet; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "Changes detected."
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
            echo "No changes detected."
          fi

      - name: Commit And Push
        if: steps.normalize.outputs.changed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          git add -A
          # If nothing is staged (race or hooks), skip
          if git diff --cached --quiet; then
            echo "No staged changes to commit."
            exit 0
          fi
          git commit -m "Normalize EOL and indentation"
          git push origin HEAD:${{ github.event.pull_request.head.ref }}
          echo "Pushed normalization changes to PR branch."
